#ifndef OSIF_FUNCTIONS_KERNEL_H_
#define OSIF_FUNCTIONS_KERNEL_H_

/*
** Copyright 2002-2006 KVASER AB, Sweden.  All rights reserved.
*/

#include "osif_kernel.h"


///////////////////////////////////////////////////////////
//
#define __os_if_wait_event_interruptible_timeout(wq, condition, ret)		\
do {									\
    wait_queue_t __wait;						\
    init_waitqueue_entry(&__wait, current);				\
    \
    add_wait_queue(&wq, &__wait);					\
    for (;;) {							\
        set_current_state(TASK_INTERRUPTIBLE);			\
        if (condition)						\
        {							\
          break;						\
        }						\
        if (!signal_pending(current)) {				\
            ret = schedule_timeout(ret);			\
            if (!ret)                                       \
                break;                                  \
            continue;				\
        }							\
        ret = -ERESTARTSYS;						\
        break;							\
    }								\
    current->state = TASK_RUNNING;					\
    remove_wait_queue(&wq, &__wait);				\
} while (0)


#define os_if_wait_event_interruptible_timeout(wq, condition, timeout)	\
({									\
long __ret = timeout;						\
if (!(condition))						\
  __os_if_wait_event_interruptible_timeout(wq, condition, __ret); \
__ret;								\
})

///////////////////////////////////////////////////////////
//
void os_if_write_port(unsigned regist, unsigned portAddr);

///////////////////////////////////////////////////////////
//
unsigned int os_if_read_port(unsigned portAddr);

///////////////////////////////////////////////////////////
//
int os_if_queue_task(OS_IF_TASK_QUEUE_HANDLE *hnd);

///////////////////////////////////////////////////////////
//
int os_if_queue_task_not_default_queue(OS_IF_WQUEUE *wq, OS_IF_TASK_QUEUE_HANDLE *hnd);

///////////////////////////////////////////////////////////
//
void os_if_init_waitqueue_head(OS_IF_WAITQUEUE_HEAD *handle);

///////////////////////////////////////////////////////////
//
void os_if_init_waitqueue_entry(OS_IF_WAITQUEUE *wait);

//////////////////////////////////////////////////////////////////////
// 
void os_if_add_wait_queue(OS_IF_WAITQUEUE_HEAD *waitQ, OS_IF_WAITQUEUE *wait);

//////////////////////////////////////////////////////////////////////
// 
void os_if_remove_wait_queue(OS_IF_WAITQUEUE_HEAD *waitQ, OS_IF_WAITQUEUE *wait);

//////////////////////////////////////////////////////////////////////
// 
signed long os_if_wait_for_event_timeout(signed long timeout, OS_IF_WAITQUEUE *handle);

//////////////////////////////////////////////////////////////////////
// 
signed long os_if_wait_for_event_timeout_simple(signed long timeout);

//////////////////////////////////////////////////////////////////////
//
void os_if_wait_for_event(OS_IF_WAITQUEUE_HEAD handle);

//////////////////////////////////////////////////////////////////////
//
//long os_if_wait_event_interruptible_timeout(OS_IF_WAITQUEUE_HEAD handle, unsigned long* cond, long time);

//////////////////////////////////////////////////////////////////////
//
void os_if_wake_up_interruptible(OS_IF_WAITQUEUE_HEAD *handle);

//////////////////////////////////////////////////////////////////////
//
void os_if_up_sema(OS_IF_SEMAPHORE *var);

//////////////////////////////////////////////////////////////////////
//
void os_if_down_sema(OS_IF_SEMAPHORE *var);

//////////////////////////////////////////////////////////////////////
//
void os_if_init_sema(OS_IF_SEMAPHORE *var);

//////////////////////////////////////////////////////////////////////
// 
void os_if_set_task_interruptible(void);

//////////////////////////////////////////////////////////////////////
// 
void os_if_set_task_uninterruptible(void);

//////////////////////////////////////////////////////////////////////
// 
void os_if_set_task_running(void);

//////////////////////////////////////////////////////////////////////
// 
unsigned long os_if_get_timeout_time(void);

//////////////////////////////////////////////////////////////////////
//
void os_if_do_get_time_of_day(OS_IF_TIME_VAL *tv);

//////////////////////////////////////////////////////////////////////
//
int os_if_is_rec_busy(int nr, volatile unsigned long* addr);

//////////////////////////////////////////////////////////////////////
//
void os_if_rec_not_busy(int nr, volatile unsigned long * addr);

//////////////////////////////////////////////////////////////////////
//
void os_if_spin_lock(OS_IF_LOCK* lock);

//////////////////////////////////////////////////////////////////////
//
void os_if_spin_unlock(OS_IF_LOCK* lock);

//////////////////////////////////////////////////////////////////////
//
void os_if_irq_disable(OS_IF_LOCK *lock);

//////////////////////////////////////////////////////////////////////
//
void os_if_irq_enable(OS_IF_LOCK *lock);

//////////////////////////////////////////////////////////////////////
//
void os_if_irq_save(OS_IF_LOCK *lock, unsigned long flags);

//////////////////////////////////////////////////////////////////////
//
void os_if_irq_restore(OS_IF_LOCK *lock, unsigned long flags);

//////////////////////////////////////////////////////////////////////
//
int os_if_get_user_data(void * to, const void * from, OS_IF_SIZE n);

//////////////////////////////////////////////////////////////////////
//
int os_if_set_user_data(void * to, const void * from, OS_IF_SIZE n);

//////////////////////////////////////////////////////////////////////
//
int os_if_set_int(int val, int* dest);

//////////////////////////////////////////////////////////////////////
//
int os_if_get_int(int* val, int* dest);

//////////////////////////////////////////////////////////////////////
//
int os_if_get_long(long* val, long* dest);

//////////////////////////////////////////////////////////////////////
//
OS_IF_WQUEUE* os_if_declare_task(char * name);

//////////////////////////////////////////////////////////////////////
//
void os_if_destroy_task(OS_IF_WQUEUE *wQueue);

//////////////////////////////////////////////////////////////////////
//
void os_if_init_task(OS_IF_TASK_QUEUE_HANDLE *taskQ, void *function, void *data);

//////////////////////////////////////////////////////////////////////
//
void os_if_read_lock(rwlock_t *rw_lock, unsigned long flags);

//////////////////////////////////////////////////////////////////////
//
void os_if_read_unlock(rwlock_t *rw_lock, unsigned long flags);

//////////////////////////////////////////////////////////////////////
//
void os_if_write_lock(rwlock_t *rw_lock, unsigned long flags);

//////////////////////////////////////////////////////////////////////
//
void os_if_write_unlock(rwlock_t *rw_lock, unsigned long flags);

#endif //OSIF_FUNCTIONS_KERNEL_H_
